<?php
/**
 * Coverages
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aylien\NewsApi\Models;

use \ArrayAccess;
use \Aylien\NewsApi\ObjectSerializer;

/**
 * Coverages Class Doc Comment
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Coverages implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Coverages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'coverages' => '\Aylien\NewsApi\Models\Story[]',
        'storyBody' => 'string',
        'storyLanguage' => 'string',
        'storyPublishedAt' => '\DateTime',
        'storyTitle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'coverages' => null,
        'storyBody' => null,
        'storyLanguage' => null,
        'storyPublishedAt' => 'date-time',
        'storyTitle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coverages' => 'coverages',
        'storyBody' => 'story_body',
        'storyLanguage' => 'story_language',
        'storyPublishedAt' => 'story_published_at',
        'storyTitle' => 'story_title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coverages' => 'setCoverages',
        'storyBody' => 'setStoryBody',
        'storyLanguage' => 'setStoryLanguage',
        'storyPublishedAt' => 'setStoryPublishedAt',
        'storyTitle' => 'setStoryTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coverages' => 'getCoverages',
        'storyBody' => 'getStoryBody',
        'storyLanguage' => 'getStoryLanguage',
        'storyPublishedAt' => 'getStoryPublishedAt',
        'storyTitle' => 'getStoryTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coverages'] = isset($data['coverages']) ? $data['coverages'] : null;
        $this->container['storyBody'] = isset($data['storyBody']) ? $data['storyBody'] : null;
        $this->container['storyLanguage'] = isset($data['storyLanguage']) ? $data['storyLanguage'] : null;
        $this->container['storyPublishedAt'] = isset($data['storyPublishedAt']) ? $data['storyPublishedAt'] : null;
        $this->container['storyTitle'] = isset($data['storyTitle']) ? $data['storyTitle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coverages
     *
     * @return \Aylien\NewsApi\Models\Story[]|null
     */
    public function getCoverages()
    {
        return $this->container['coverages'];
    }

    /**
     * Sets coverages
     *
     * @param \Aylien\NewsApi\Models\Story[]|null $coverages An array of coverages for the input story
     *
     * @return $this
     */
    public function setCoverages($coverages)
    {
        $this->container['coverages'] = $coverages;

        return $this;
    }

    /**
     * Gets storyBody
     *
     * @return string|null
     */
    public function getStoryBody()
    {
        return $this->container['storyBody'];
    }

    /**
     * Sets storyBody
     *
     * @param string|null $storyBody The input story body
     *
     * @return $this
     */
    public function setStoryBody($storyBody)
    {
        $this->container['storyBody'] = $storyBody;

        return $this;
    }

    /**
     * Gets storyLanguage
     *
     * @return string|null
     */
    public function getStoryLanguage()
    {
        return $this->container['storyLanguage'];
    }

    /**
     * Sets storyLanguage
     *
     * @param string|null $storyLanguage The input story language
     *
     * @return $this
     */
    public function setStoryLanguage($storyLanguage)
    {
        $this->container['storyLanguage'] = $storyLanguage;

        return $this;
    }

    /**
     * Gets storyPublishedAt
     *
     * @return \DateTime|null
     */
    public function getStoryPublishedAt()
    {
        return $this->container['storyPublishedAt'];
    }

    /**
     * Sets storyPublishedAt
     *
     * @param \DateTime|null $storyPublishedAt The input story published date
     *
     * @return $this
     */
    public function setStoryPublishedAt($storyPublishedAt)
    {
        $this->container['storyPublishedAt'] = $storyPublishedAt;

        return $this;
    }

    /**
     * Gets storyTitle
     *
     * @return string|null
     */
    public function getStoryTitle()
    {
        return $this->container['storyTitle'];
    }

    /**
     * Sets storyTitle
     *
     * @param string|null $storyTitle The input story title
     *
     * @return $this
     */
    public function setStoryTitle($storyTitle)
    {
        $this->container['storyTitle'] = $storyTitle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


