<?php
/**
 * Histograms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aylien\NewsApi\Models;

use \ArrayAccess;
use \Aylien\NewsApi\ObjectSerializer;

/**
 * Histograms Class Doc Comment
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Histograms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Histograms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'field' => 'string',
        'interval_end' => 'int',
        'interval_start' => 'int',
        'interval_width' => 'int',
        'intervals' => '\Aylien\NewsApi\Models\HistogramInterval[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'field' => null,
        'interval_end' => 'int32',
        'interval_start' => 'int32',
        'interval_width' => 'int32',
        'intervals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field' => 'field',
        'interval_end' => 'interval.end',
        'interval_start' => 'interval.start',
        'interval_width' => 'interval.width',
        'intervals' => 'intervals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field' => 'setField',
        'interval_end' => 'setIntervalEnd',
        'interval_start' => 'setIntervalStart',
        'interval_width' => 'setIntervalWidth',
        'intervals' => 'setIntervals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field' => 'getField',
        'interval_end' => 'getIntervalEnd',
        'interval_start' => 'getIntervalStart',
        'interval_width' => 'getIntervalWidth',
        'intervals' => 'getIntervals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['interval_end'] = isset($data['interval_end']) ? $data['interval_end'] : null;
        $this->container['interval_start'] = isset($data['interval_start']) ? $data['interval_start'] : null;
        $this->container['interval_width'] = isset($data['interval_width']) ? $data['interval_width'] : null;
        $this->container['intervals'] = isset($data['intervals']) ? $data['intervals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field
     *
     * @return string|null
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string|null $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets interval_end
     *
     * @return int|null
     */
    public function getIntervalEnd()
    {
        return $this->container['interval_end'];
    }

    /**
     * Sets interval_end
     *
     * @param int|null $interval_end The end interval of the histogram
     *
     * @return $this
     */
    public function setIntervalEnd($interval_end)
    {
        $this->container['interval_end'] = $interval_end;

        return $this;
    }

    /**
     * Gets interval_start
     *
     * @return int|null
     */
    public function getIntervalStart()
    {
        return $this->container['interval_start'];
    }

    /**
     * Sets interval_start
     *
     * @param int|null $interval_start The start interval of the histogram
     *
     * @return $this
     */
    public function setIntervalStart($interval_start)
    {
        $this->container['interval_start'] = $interval_start;

        return $this;
    }

    /**
     * Gets interval_width
     *
     * @return int|null
     */
    public function getIntervalWidth()
    {
        return $this->container['interval_width'];
    }

    /**
     * Sets interval_width
     *
     * @param int|null $interval_width The width of the histogram
     *
     * @return $this
     */
    public function setIntervalWidth($interval_width)
    {
        $this->container['interval_width'] = $interval_width;

        return $this;
    }

    /**
     * Gets intervals
     *
     * @return \Aylien\NewsApi\Models\HistogramInterval[]|null
     */
    public function getIntervals()
    {
        return $this->container['intervals'];
    }

    /**
     * Sets intervals
     *
     * @param \Aylien\NewsApi\Models\HistogramInterval[]|null $intervals The intervals of the histograms
     *
     * @return $this
     */
    public function setIntervals($intervals)
    {
        $this->container['intervals'] = $intervals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


