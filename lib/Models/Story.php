<?php
/**
 * Story
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aylien\NewsApi\Models;

use \ArrayAccess;
use \Aylien\NewsApi\ObjectSerializer;

/**
 * Story Class Doc Comment
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Story implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Story';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'author' => '\Aylien\NewsApi\Models\Author',
        'body' => 'string',
        'categories' => '\Aylien\NewsApi\Models\Category[]',
        'characters_count' => 'int',
        'clusters' => 'int[]',
        'entities' => '\Aylien\NewsApi\Models\Entities',
        'hashtags' => 'string[]',
        'id' => 'int',
        'keywords' => 'string[]',
        'language' => 'string',
        'links' => '\Aylien\NewsApi\Models\StoryLinks',
        'media' => '\Aylien\NewsApi\Models\Media[]',
        'paragraphs_count' => 'int',
        'published_at' => '\DateTime',
        'sentences_count' => 'int',
        'sentiment' => '\Aylien\NewsApi\Models\Sentiments',
        'social_shares_count' => '\Aylien\NewsApi\Models\ShareCounts',
        'source' => '\Aylien\NewsApi\Models\Source',
        'summary' => '\Aylien\NewsApi\Models\Summary',
        'title' => 'string',
        'translations' => '\Aylien\NewsApi\Models\StoryTranslations',
        'words_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'author' => null,
        'body' => null,
        'categories' => null,
        'characters_count' => 'int32',
        'clusters' => 'int64',
        'entities' => null,
        'hashtags' => null,
        'id' => 'int64',
        'keywords' => null,
        'language' => null,
        'links' => null,
        'media' => null,
        'paragraphs_count' => 'int32',
        'published_at' => 'date-time',
        'sentences_count' => 'int32',
        'sentiment' => null,
        'social_shares_count' => null,
        'source' => null,
        'summary' => null,
        'title' => null,
        'translations' => null,
        'words_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author' => 'author',
        'body' => 'body',
        'categories' => 'categories',
        'characters_count' => 'characters_count',
        'clusters' => 'clusters',
        'entities' => 'entities',
        'hashtags' => 'hashtags',
        'id' => 'id',
        'keywords' => 'keywords',
        'language' => 'language',
        'links' => 'links',
        'media' => 'media',
        'paragraphs_count' => 'paragraphs_count',
        'published_at' => 'published_at',
        'sentences_count' => 'sentences_count',
        'sentiment' => 'sentiment',
        'social_shares_count' => 'social_shares_count',
        'source' => 'source',
        'summary' => 'summary',
        'title' => 'title',
        'translations' => 'translations',
        'words_count' => 'words_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author' => 'setAuthor',
        'body' => 'setBody',
        'categories' => 'setCategories',
        'characters_count' => 'setCharactersCount',
        'clusters' => 'setClusters',
        'entities' => 'setEntities',
        'hashtags' => 'setHashtags',
        'id' => 'setId',
        'keywords' => 'setKeywords',
        'language' => 'setLanguage',
        'links' => 'setLinks',
        'media' => 'setMedia',
        'paragraphs_count' => 'setParagraphsCount',
        'published_at' => 'setPublishedAt',
        'sentences_count' => 'setSentencesCount',
        'sentiment' => 'setSentiment',
        'social_shares_count' => 'setSocialSharesCount',
        'source' => 'setSource',
        'summary' => 'setSummary',
        'title' => 'setTitle',
        'translations' => 'setTranslations',
        'words_count' => 'setWordsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author' => 'getAuthor',
        'body' => 'getBody',
        'categories' => 'getCategories',
        'characters_count' => 'getCharactersCount',
        'clusters' => 'getClusters',
        'entities' => 'getEntities',
        'hashtags' => 'getHashtags',
        'id' => 'getId',
        'keywords' => 'getKeywords',
        'language' => 'getLanguage',
        'links' => 'getLinks',
        'media' => 'getMedia',
        'paragraphs_count' => 'getParagraphsCount',
        'published_at' => 'getPublishedAt',
        'sentences_count' => 'getSentencesCount',
        'sentiment' => 'getSentiment',
        'social_shares_count' => 'getSocialSharesCount',
        'source' => 'getSource',
        'summary' => 'getSummary',
        'title' => 'getTitle',
        'translations' => 'getTranslations',
        'words_count' => 'getWordsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['characters_count'] = isset($data['characters_count']) ? $data['characters_count'] : null;
        $this->container['clusters'] = isset($data['clusters']) ? $data['clusters'] : null;
        $this->container['entities'] = isset($data['entities']) ? $data['entities'] : null;
        $this->container['hashtags'] = isset($data['hashtags']) ? $data['hashtags'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['paragraphs_count'] = isset($data['paragraphs_count']) ? $data['paragraphs_count'] : null;
        $this->container['published_at'] = isset($data['published_at']) ? $data['published_at'] : null;
        $this->container['sentences_count'] = isset($data['sentences_count']) ? $data['sentences_count'] : null;
        $this->container['sentiment'] = isset($data['sentiment']) ? $data['sentiment'] : null;
        $this->container['social_shares_count'] = isset($data['social_shares_count']) ? $data['social_shares_count'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['words_count'] = isset($data['words_count']) ? $data['words_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets author
     *
     * @return \Aylien\NewsApi\Models\Author|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \Aylien\NewsApi\Models\Author|null $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body Body of the story
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Aylien\NewsApi\Models\Category[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Aylien\NewsApi\Models\Category[]|null $categories Suggested categories for the story
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets characters_count
     *
     * @return int|null
     */
    public function getCharactersCount()
    {
        return $this->container['characters_count'];
    }

    /**
     * Sets characters_count
     *
     * @param int|null $characters_count Character count of the story body
     *
     * @return $this
     */
    public function setCharactersCount($characters_count)
    {
        $this->container['characters_count'] = $characters_count;

        return $this;
    }

    /**
     * Gets clusters
     *
     * @return int[]|null
     */
    public function getClusters()
    {
        return $this->container['clusters'];
    }

    /**
     * Sets clusters
     *
     * @param int[]|null $clusters An array of clusters the story is associated with
     *
     * @return $this
     */
    public function setClusters($clusters)
    {
        $this->container['clusters'] = $clusters;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \Aylien\NewsApi\Models\Entities|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \Aylien\NewsApi\Models\Entities|null $entities entities
     *
     * @return $this
     */
    public function setEntities($entities)
    {
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets hashtags
     *
     * @return string[]|null
     */
    public function getHashtags()
    {
        return $this->container['hashtags'];
    }

    /**
     * Sets hashtags
     *
     * @param string[]|null $hashtags An array of suggested Story hashtags
     *
     * @return $this
     */
    public function setHashtags($hashtags)
    {
        $this->container['hashtags'] = $hashtags;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the story which is a unique identification
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[]|null $keywords Extracted keywords mentioned in the story title or body
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Language of the story
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Aylien\NewsApi\Models\StoryLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Aylien\NewsApi\Models\StoryLinks|null $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Aylien\NewsApi\Models\Media[]|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Aylien\NewsApi\Models\Media[]|null $media An array of extracted media such as images and videos
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets paragraphs_count
     *
     * @return int|null
     */
    public function getParagraphsCount()
    {
        return $this->container['paragraphs_count'];
    }

    /**
     * Sets paragraphs_count
     *
     * @param int|null $paragraphs_count Paragraph count of the story body
     *
     * @return $this
     */
    public function setParagraphsCount($paragraphs_count)
    {
        $this->container['paragraphs_count'] = $paragraphs_count;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime|null
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime|null $published_at Published date of the story
     *
     * @return $this
     */
    public function setPublishedAt($published_at)
    {
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets sentences_count
     *
     * @return int|null
     */
    public function getSentencesCount()
    {
        return $this->container['sentences_count'];
    }

    /**
     * Sets sentences_count
     *
     * @param int|null $sentences_count Sentence count of the story body
     *
     * @return $this
     */
    public function setSentencesCount($sentences_count)
    {
        $this->container['sentences_count'] = $sentences_count;

        return $this;
    }

    /**
     * Gets sentiment
     *
     * @return \Aylien\NewsApi\Models\Sentiments|null
     */
    public function getSentiment()
    {
        return $this->container['sentiment'];
    }

    /**
     * Sets sentiment
     *
     * @param \Aylien\NewsApi\Models\Sentiments|null $sentiment sentiment
     *
     * @return $this
     */
    public function setSentiment($sentiment)
    {
        $this->container['sentiment'] = $sentiment;

        return $this;
    }

    /**
     * Gets social_shares_count
     *
     * @return \Aylien\NewsApi\Models\ShareCounts|null
     */
    public function getSocialSharesCount()
    {
        return $this->container['social_shares_count'];
    }

    /**
     * Sets social_shares_count
     *
     * @param \Aylien\NewsApi\Models\ShareCounts|null $social_shares_count social_shares_count
     *
     * @return $this
     */
    public function setSocialSharesCount($social_shares_count)
    {
        $this->container['social_shares_count'] = $social_shares_count;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Aylien\NewsApi\Models\Source|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Aylien\NewsApi\Models\Source|null $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Aylien\NewsApi\Models\Summary|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Aylien\NewsApi\Models\Summary|null $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the story
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \Aylien\NewsApi\Models\StoryTranslations|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \Aylien\NewsApi\Models\StoryTranslations|null $translations translations
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets words_count
     *
     * @return int|null
     */
    public function getWordsCount()
    {
        return $this->container['words_count'];
    }

    /**
     * Sets words_count
     *
     * @param int|null $words_count Word count of the story body
     *
     * @return $this
     */
    public function setWordsCount($words_count)
    {
        $this->container['words_count'] = $words_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


