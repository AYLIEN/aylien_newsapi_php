<?php
/**
 * Source
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aylien\NewsApi\Models;

use \ArrayAccess;
use \Aylien\NewsApi\ObjectSerializer;

/**
 * Source Class Doc Comment
 *
 * @category Class
 * @package  Aylien\NewsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Source implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Source';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'domain' => 'string',
        'homePageUrl' => 'string',
        'id' => 'int',
        'linksInCount' => 'int',
        'locations' => '\Aylien\NewsApi\Models\Location[]',
        'logoUrl' => 'string',
        'name' => 'string',
        'rankings' => '\Aylien\NewsApi\Models\Rankings',
        'scopes' => '\Aylien\NewsApi\Models\Scope[]',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'description' => null,
        'domain' => null,
        'homePageUrl' => null,
        'id' => 'int32',
        'linksInCount' => 'int32',
        'locations' => null,
        'logoUrl' => null,
        'name' => null,
        'rankings' => null,
        'scopes' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'domain' => 'domain',
        'homePageUrl' => 'home_page_url',
        'id' => 'id',
        'linksInCount' => 'links_in_count',
        'locations' => 'locations',
        'logoUrl' => 'logo_url',
        'name' => 'name',
        'rankings' => 'rankings',
        'scopes' => 'scopes',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'domain' => 'setDomain',
        'homePageUrl' => 'setHomePageUrl',
        'id' => 'setId',
        'linksInCount' => 'setLinksInCount',
        'locations' => 'setLocations',
        'logoUrl' => 'setLogoUrl',
        'name' => 'setName',
        'rankings' => 'setRankings',
        'scopes' => 'setScopes',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'domain' => 'getDomain',
        'homePageUrl' => 'getHomePageUrl',
        'id' => 'getId',
        'linksInCount' => 'getLinksInCount',
        'locations' => 'getLocations',
        'logoUrl' => 'getLogoUrl',
        'name' => 'getName',
        'rankings' => 'getRankings',
        'scopes' => 'getScopes',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['homePageUrl'] = isset($data['homePageUrl']) ? $data['homePageUrl'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['linksInCount'] = isset($data['linksInCount']) ? $data['linksInCount'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['logoUrl'] = isset($data['logoUrl']) ? $data['logoUrl'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rankings'] = isset($data['rankings']) ? $data['rankings'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A general explanation about the source
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain The domain name of the source which is extracted from the source URL
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets homePageUrl
     *
     * @return string|null
     */
    public function getHomePageUrl()
    {
        return $this->container['homePageUrl'];
    }

    /**
     * Sets homePageUrl
     *
     * @param string|null $homePageUrl The home page URL of the source
     *
     * @return $this
     */
    public function setHomePageUrl($homePageUrl)
    {
        $this->container['homePageUrl'] = $homePageUrl;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The source id which is a unique value
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets linksInCount
     *
     * @return int|null
     */
    public function getLinksInCount()
    {
        return $this->container['linksInCount'];
    }

    /**
     * Sets linksInCount
     *
     * @param int|null $linksInCount The number of websites that link to the source
     *
     * @return $this
     */
    public function setLinksInCount($linksInCount)
    {
        $this->container['linksInCount'] = $linksInCount;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Aylien\NewsApi\Models\Location[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Aylien\NewsApi\Models\Location[]|null $locations The source locations which are tend to be the physical locations of the source, e.g. BBC headquarter is located in London.
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets logoUrl
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logoUrl'];
    }

    /**
     * Sets logoUrl
     *
     * @param string|null $logoUrl A URL which points to the source logo
     *
     * @return $this
     */
    public function setLogoUrl($logoUrl)
    {
        $this->container['logoUrl'] = $logoUrl;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The source name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rankings
     *
     * @return \Aylien\NewsApi\Models\Rankings|null
     */
    public function getRankings()
    {
        return $this->container['rankings'];
    }

    /**
     * Sets rankings
     *
     * @param \Aylien\NewsApi\Models\Rankings|null $rankings rankings
     *
     * @return $this
     */
    public function setRankings($rankings)
    {
        $this->container['rankings'] = $rankings;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return \Aylien\NewsApi\Models\Scope[]|null
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param \Aylien\NewsApi\Models\Scope[]|null $scopes The source scopes which is tend to be scope locations of the source, e.g. BBC scopes is international.
     *
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the home page URL
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


